# generate the following six parameters with the following command
# docker run --rm -ti psono/psono-server:latest python3 ./psono/manage.py generateserverkeys
SECRET_KEY: {{ .Values.server.secretKey | squote }}
ACTIVATION_LINK_SECRET: {{ .Values.server.activationLinkSecret | squote }}
DB_SECRET: {{ .Values.server.dbSecret | squote }}
EMAIL_SECRET_SALT: {{ .Values.server.emailSecretSalt | squote }}
PRIVATE_KEY: {{ .Values.server.privateKey | squote }}
PUBLIC_KEY: {{ .Values.server.publicKey | squote }}

# The URL of the web client (path to e.g activate.html without the trailing slash)
  {{- if .Values.client.enabled }}
WEB_CLIENT_URL: '{{ include "psono.client.externalUrl" . }}'
  {{- end }}

# Switch DEBUG to false if you go into production
DEBUG: {{ .Values.server.debug | ternary "True" "False"}}

# Adjust this according to Django Documentation https://docs.djangoproject.com/en/1.10/ref/settings/
  {{- with .Values.server.allowedHosts }}
ALLOWED_HOSTS:
  {{- toYaml . | nindent 6 }}
  {{- end }}

# Should be your domain without "www.". Will be the last part of the username
  {{- with .Values.server.allowedDomains }}
ALLOWED_DOMAINS:
  {{- toYaml . | nindent 6 }}
  {{- end }}

# If you want to disable registration, you can comment in the following line
ALLOW_REGISTRATION: {{ .Values.server.allowRegistration | default false | ternary "True" "False" }}

# If you want to disable the lost password functionality, you can comment in the following line
ALLOW_LOST_PASSWORD: {{ .Values.server.allowLostPassword | default false | ternary "True" "False" }}

# If you want to restrict registration to some email addresses you can specify here a list of domains to filter
# REGISTRATION_EMAIL_FILTER: ['company1.com', 'company2.com']

# Should be the URL of the host under which the host is reachable
# If you open the url and append /info/ to it you should have a text similar to {"info":"{\"version\": \"....}
HOST_URL: '{{ include "psono.server.externalUrl" . | trimSuffix "/" }}'

# The email used to send emails, e.g. for activation
# ATTENTION: If executed in a docker container, then "localhost" will resolve to the docker container, so
# "localhost" will not work as host. Use the public IP or DNS record of the server.
EMAIL_FROM: {{ .Values.server.mail.from | squote }}
EMAIL_HOST: {{ .Values.server.mail.host | squote }}
EMAIL_HOST_USER: ''
EMAIL_HOST_PASSWORD : ''
EMAIL_PORT: {{ .Values.server.mail.port | default 25 | squote }}
EMAIL_SUBJECT_PREFIX: ''
EMAIL_USE_TLS: {{ .Values.server.mail.tls | default false | ternary "True" "False" }}
EMAIL_USE_SSL: {{ .Values.server.mail.ssl | default false | ternary "True" "False" }}
EMAIL_SSL_CERTFILE:
EMAIL_SSL_KEYFILE:
EMAIL_TIMEOUT:

# In case one wants to use mailgun, comment in below lines and provide the mailgun access key and server name
# EMAIL_BACKEND: 'anymail.backends.mailgun.EmailBackend'
# MAILGUN_ACCESS_KEY: ''
# MAILGUN_SERVER_NAME: ''

# In case you want to offer Yubikey support, create a pair of credentials here https://upgrade.yubico.com/getapikey/
# and update the following two lines before commenting them in
# YUBIKEY_CLIENT_ID: '123456'
# YUBIKEY_SECRET_KEY: '8I65IA6ASDFIUHGIH5021FKJA='

# If you have own Yubico servers, you can specify here the urls as a list
# YUBICO_API_URLS: ['https://api.yubico.com/wsapi/2.0/verify']

# Cache enabled without belows Redis may lead to unexpected behaviour

# Cache with Redis
# By default you should use something different than database 0 or 1, e.g. 13 (default max is 16, can be configured in
# redis.conf) possible URLS are:
#    redis://[:password]@localhost:6379/0
#    rediss://[:password]@localhost:6379/0
#    unix://[:password]@/path/to/socket.sock?db=0
# CACHE_ENABLE: False
# CACHE_REDIS: False
# CACHE_REDIS_LOCATION: 'redis://127.0.0.1:6379/13'

# Disables Throttling (necessary for unittests to pass) by overriding the cache with a dummy cache
# https://docs.djangoproject.com/en/1.11/topics/cache/#dummy-caching-for-development
# THROTTLING: False

# The server will automatically connect to the license server to get a license for 10 users.
# For paying customers we offer the opportunity to get an offline license code.
#
# LICENSE_CODE: |
#   0abcdefg...
#   1abcdefg...
#   2abcdefg...
#   3abcdefg...
#   4abcdefg...
#   5abcdefg...
#   6abcdefg...
#   7abcdefg...
#   8abcdefg...

# Enables the management API, required for the psono-admin-client / admin portal
MANAGEMENT_ENABLED: {{ .Values.admin.enabled | default false | ternary "True" "False" }}

# Enables the fileserver API, required for the psono-fileserver
FILESERVER_HANDLER_ENABLED:  {{ .Values.fileserver.enabled | default false | ternary "True" "False" }}

# Enables files for the client
FILES_ENABLED: {{ .Values.client.enableFiles | default false | ternary "True" "False" }}

# Allows that users can search for partial usernames
# ALLOW_USER_SEARCH_BY_USERNAME_PARTIAL: True

# Allows that users can search for email addresses too
# ALLOW_USER_SEARCH_BY_EMAIL: True

# Allows admins to limit the offered second factors in the client
# ALLOWED_SECOND_FACTORS: ['yubikey_otp', 'google_authenticator', 'duo']

# Enforce the user to setup a second factor
# COMPLIANCE_ENFORCE_2FA: True

# Disables recovery codes
# COMPLIANCE_DISABLE_RECOVERY_CODES: True

# Disables file repositories
# COMPLIANCE_DISABLE_FILE_REPOSITORIES: True

# Disables emergency codes
# COMPLIANCE_DISABLE_EMERGENCY_CODES: True

# Disables the possibility for a user to delete his own account
# COMPLIANCE_DISABLE_DELETE_ACCOUNT: True

# Disables the export of passwords
# COMPLIANCE_DISABLE_EXPORT: True

# Disables API keys
# COMPLIANCE_DISABLE_API_KEYS: True

# Disables Link shares
# COMPLIANCE_DISABLE_LINK_SHARES: True

# Only necessary if the psono-client runs on a sub path (no trailing slash) e.g. "https://wwww.psono.pw"
# WEB_CLIENT_URL: ''

# Prevents the use of the last X passwords. 0 disables it.
# DISABLE_LAST_PASSWORDS: 0

# If you want to use LDAP, then you can configure it like this
#
# 	LDAP_URL: Any valid LDAP string, preferable with ldaps. usual urls are 'ldaps://example.com:636' or 'ldap://192.168.0.1:389'
#		LDAP_DOMAIN: Your LDAP domain, is added at the end of the username to form the full username
#		LDAP_BIND_DN: One User that can be used to search your LDAP
#		LDAP_BIND_PASS: The password of the user specified in LDAP_BIND_DN
#		LDAP_ATTR_GUID: The uuid attribute. e.g. on Windows 'objectGUID', but common are 'GUID' or 'entryUUID', default 'objectGUID'
#		LDAP_OBJECT_CLASS_USER: The objectClass value to filter user objects e.g. on Windows 'user', default 'user'
#		LDAP_OBJECT_CLASS_GROUP: The objectClass value to filter group objects e.g. on Windows 'group', default 'group'
#		LDAP_SEARCH_USER_DN: The "root" from which downwards we search for the users
#		LDAP_SEARCH_GROUP_DN: The "root" from which downwards we search for the groups
#		LDAP_ATTR_USERNAME: The username attribute to try to match against. e.g. on Windows 'sAMAccountName', default 'sAMAccountName'
#		LDAP_ATTR_EMAIL: The attribute of the user objects that holds the mail address e.g. on Windows 'mail', default 'mail'
#		LDAP_ATTR_GROUPS: The attribute of the user objects that holds the groups e.g. on Windows 'memberOf', default 'memberOf'
#		LDAP_CA_CERT_FILE: If you want to use ldaps and don't have a publicly trusted and signed certificate you can specify here the path to your ca certificate
#
#		LDAP_MEMBER_OF_OVERLAY: If your server has not this memberOf overlay, you can switch modes with this flag.
#                               Users will be mapped (based on their LDAP_ATTR_GROUP_MEMBER_ATTRIBUTE attribute) to groups (based on their LDAP_ATTR_MEMBERS attribute), default True
#		LDAP_ATTR_GROUP_MEMBER_ATTRIBUTE: The user attribute that will be used to map the group memberships, default 'uid'
#		LDAP_ATTR_MEMBERS: The group attribute that will be used to map the to the users LDAP_ATTR_GROUP_MEMBER_ATTRIBUTE attribute, default 'memberUid'
#
# To help you setup LDAP, we have created a small "testldap" command that should make things alot easier. You can execute it like:
# python3 psono/manage.py testldap username@something.com thePassWord
#
# For Windows AD it could look like this:
#
# LDAP : [
#     {
#         'LDAP_URL': 'ldaps://192.168.0.1:636',
#         'LDAP_DOMAIN': 'example.com',
#         'LDAP_BIND_DN': 'CN=LDAPPsono,OU=UsersTech,OU=example.com,DC=example,DC=com',
#         'LDAP_BIND_PASS': 'hopefully_not_123456',
#         'LDAP_SEARCH_USER_DN': 'OU=Users,OU=example.com,DC=example,DC=com',
#         'LDAP_SEARCH_GROUP_DN': 'OU=Groups,OU=example.com,DC=example,DC=com',
#     },
# ]
#
# For OpenLDAP it could look like this:
#
# LDAP : [
#     {
#         'LDAP_URL': 'ldaps://192.168.0.1:636',
#         'LDAP_DOMAIN': 'example.com',
#         'LDAP_BIND_DN': 'CN=LDAPPsono,OU=UsersTech,OU=example.com,DC=example,DC=com',
#         'LDAP_BIND_PASS': 'hopefully_not_123456',
#         'LDAP_SEARCH_USER_DN': 'OU=Users,OU=example.com,DC=example,DC=com',
#         'LDAP_SEARCH_GROUP_DN': 'OU=Groups,OU=example.com,DC=example,DC=com',
#         'LDAP_OBJECT_CLASS_USER': 'posixAccount',
#         'LDAP_OBJECT_CLASS_GROUP': 'posixGroup',
#         'LDAP_ATTR_USERNAME': 'uid',
#         'LDAP_ATTR_GUID': 'entryUUID',
#     },
# ]
#
# If your server does not have the memberOf overlay, then you can also do something like this
#
# LDAP : [
#     {
#         'LDAP_URL': 'ldaps://192.168.0.1:636',
#         'LDAP_DOMAIN': 'example.com',
#         'LDAP_BIND_DN': 'CN=LDAPPsono,OU=UsersTech,OU=example.com,DC=example,DC=com',
#         'LDAP_BIND_PASS': 'hopefully_not_123456',
#         'LDAP_SEARCH_USER_DN': 'OU=Users,OU=example.com,DC=example,DC=com',
#         'LDAP_SEARCH_GROUP_DN': 'OU=Groups,OU=example.com,DC=example,DC=com',
#         'LDAP_OBJECT_CLASS_USER': 'posixAccount',
#         'LDAP_OBJECT_CLASS_GROUP': 'posixGroup',
#         'LDAP_ATTR_USERNAME': 'uid',
#         'LDAP_ATTR_GUID': 'entryUUID',
#         'LDAP_MEMBER_OF_OVERLAY': False,
#         'LDAP_ATTR_GROUP_MEMBER_ATTRIBUTE': 'uid',
#         'LDAP_ATTR_MEMBERS': 'memberUid',
#     },
# ]
#
# ATTENTION: API kays currently bypass LDAP authentication, that means API keys can still access secrets even if the
# user was disabled in LDAP. API keys can be disabled with COMPLIANCE_DISABLE_API_KEYS
  {{- if .Values.server.ldap.enabled }}
  {{- with .Values.server.ldap }}
LDAP : [
  {
    'LDAP_URL': {{ .url | squote }},
    'LDAP_DOMAIN': {{ .domain | squote }},
    'LDAP_BIND_DN': {{ .bindDN | squote }},
    'LDAP_BIND_PASS': {{ .bindPass | squote }},
    'LDAP_SEARCH_USER_DN': {{ .userBaseDN | squote }},
    'LDAP_SEARCH_GROUP_DN': {{ .groupBaseDN | squote }},
  },
]
  {{- end }}
  {{- end }}


# Enable Audit logging
# LOGGING_AUDIT: True

# To log to another destination you can specify this here, default '/var/log/psono'
# Never really necessary, as we will run the psono server in a docker container and can mount /var/log/psono to any
# location on the underlying docker host.
# LOGGING_AUDIT_FOLDER: '/var/log/psono'

# If you prefer server time over utc, you can do that like below (default 'time_utc')
# LOGGING_AUDIT_TIME: 'time_server'

# If the server logs too much for you can either whitelist or blacklist events by their event code. (default: [])
# LOGGING_AUDIT_WHITELIST: []
# LOGGING_AUDIT_BLACKLIST: []

# If you want to use SAML, then you can configure it like this as a dictionary.
#
# About the parameters:
#   idp->entityId: Thats the url to the metadata of your IDP
#   idp->singleLogoutService->url: Thats the url to the logout service of your IDP
#   idp->singleSignOnService->url: Thats the url to the single sign-on service of your IDP
#   idp->x509cert: Thats the certificate of your IDP
#   idp->groups_attribute: The attribute in the SAML response that holds your groups
#   idp->username_attribute: The attribute in the SAML response that holds the username. If you put here null, then it will use the NameID
#   idp->email_attribute: The attribute in the SAML response that holds the email address.
#   idp->username_domain: The domain that is appended to the provided username, if the provided username is not already in email format.
#   idp->required_group: A list of group names (casesensitive) in order to restrict who can use SAML login with this installation. Leave empty for no restriction.
#   idp->is_adfs: If you are using ADFS.
#   idp->honor_multifactors: Multifactor authentication can be bypassed with this flag for all SAML users (e.g. when you already enforce multifactor on the SAML provider).
#   idp->max_session_lifetime: The time in seconds that a session created throught SAML will live
#
#   sp->NameIDFormat: The normal nameformat parameter. (should only be set to transient if you have set a username attribute with username_attribute)
#   sp->attributeConsumingService: Only necessary if the IDP needs to be told to send some specific attributes
#   sp->x509cert: The X.509 cert
#   sp->privateKey: The corresponding private key of the X.509 cert
#
# There are a couple of more options next to those required ones below.
# More information can be found here https://github.com/onelogin/python3-saml
#
# A self-signed certificate can be generated with:
# openssl req -new -newkey rsa:2048 -x509 -days 3650 -nodes -sha256 -out sp_x509cert.crt -keyout sp_private_key.key
#
# To help you setup SAML, we have created a small "testsaml" command that should make things easier. You can execute it like:
# python3 psono/manage.py testsaml
#
# The number 1 in line 2 is the provider id. Users are matched by the constructed username.
#
{{- if .Values.server.saml.enabled }}
{{- with .Values.server.saml }}
SAML_CONFIGURATIONS:
  1:
    idp:
      entityId: {{ .idp.entityId | quote }}
      singleLogoutService:
        binding: "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"
        url: "https://login.microsoftonline.com/common/wsfederation?wa=wsignout1.0"
      singleSignOnService:
        binding: "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"
        url: {{ .idp.singleSignOnService.url | quote }}
      x509cert: {{ .idp.x509cert | quote }}
      groups_attribute: "groups"
      username_attribute: "username"
      email_attribute: "email"
      username_domain: {{ .idp.username_domain | quote }}
      required_group: {{ .idp.required_group }}
      is_adfs: true
      honor_multifactors: true
      max_session_lifetime: {{ .idp.max_session_lifetime }}
    sp:
      NameIDFormat: "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent"
      assertionConsumerService:
        binding: "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST"
      attributeConsumingService:
        serviceName: {{ .sp.attributeConsumingService.serviceName | quote }}
        serviceDescription: {{ .sp.attributeConsumingService.serviceDescription | quote }}
        requestedAttributes:
          -
             attributeValue: []
             friendlyName: ""
             isRequired: false
             name: "username"
             nameFormat: ""
      privateKey: {{ .sp.privateKey | quote }}
      singleLogoutService:
        binding: "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"
      x509cert: {{ .sp.x509cert | quote }}
    strict: true
    security:
      requestedAuthnContext: false
{{- end }}
{{- end }}


{{- if .Values.server.oidc.enabled }}
{{- with .Values.server.oidc }}
OIDC_CONFIGURATIONS:
  1:
    OIDC_RP_SIGN_ALGO: {{ .sign_algo }}
    OIDC_RP_CLIENT_ID: {{ .client_id }}
    OIDC_RP_CLIENT_SECRET: {{ .client_secret }}
    OIDC_OP_JWKS_ENDPOINT: {{ .jwks_endpoint }}
    OIDC_OP_AUTHORIZATION_ENDPOINT: {{ .authorization_endpoint }}
    OIDC_OP_TOKEN_ENDPOINT: {{ .token_endpoint }}
    OIDC_OP_USER_ENDPOINT: {{ .user_endpoint }}
    OIDC_OP_END_SESSION_ENDPOINT: {{ .end_session_endpoint }}
{{- end }}
{{- end }}

# You also have to comment in the line below if you want to use LDAP (default: ['AUTHKEY'])
AUTHENTICATION_METHODS: {{ include "psono.server.auth.methods" . }}

#
# ATTENTION: API kays currently bypass SAML authentication, that means API keys can still access secrets even if the
# user was disabled in SAML. API keys can be disabled with COMPLIANCE_DISABLE_API_KEYS

# Your Postgres Database credentials
# ATTENTION: If executed in a docker container, then "localhost" will resolve to the docker container, so
# "localhost" will not work as host. Use the public IP or DNS record of the server.
DATABASES:
  default:
    'ENGINE': 'django.db.backends.postgresql_psycopg2'
    'NAME': {{ .Values.server.db.name | default "psono" | squote }}
    'USER': {{ .Values.server.db.user | default "psono" | squote }}
    'PASSWORD': {{ .Values.server.db.password | default "psono" | squote }}
    'HOST': '{{ include "psono.db.host" . }}'
    'PORT': '{{ include "psono.db.port" . }}'
# for master / slave replication setup comment in the following (all reads will be redirected to the slave
#    slave:
#        'ENGINE': 'django.db.backends.postgresql_psycopg2'
#        'NAME': 'YourPostgresDatabase'
#        'USER': 'YourPostgresUser'
#        'PASSWORD': 'YourPostgresPassword'
#        'HOST': 'YourPostgresHost'
#        'PORT': 'YourPostgresPort'

# The path to the template folder can be "shadowed" if required later
TEMPLATES: [
  {
    'BACKEND': 'django.template.backends.django.DjangoTemplates',
    'DIRS': ['/root/psono/templates'],
    'APP_DIRS': True,
    'OPTIONS': {
      'context_processors': [
          'django.template.context_processors.debug',
          'django.template.context_processors.request',
          'django.contrib.auth.context_processors.auth',
          'django.contrib.messages.context_processors.messages',
      ],
    },
  },
]